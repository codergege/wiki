= map =

* 1. specifying maps
{{{
通常定义一个 map 是这样的: [key1:value1, key2:value2, key3:value3]
这种定义默认产生的 map 是 java.util.LinkedHashMap 也可以 explicitly 通过 new 指定 map 类型.
map 的 key 可以是任意类型, 但是一般都是 String 类型比较常用. 
如果 key 是 String 类型, 可以不写引号, 前提是不含特殊字符.

def myMap = [a:1, b:2, c:3]
assert myMap instanceof LinkedHashMap
assert myMap.size() == 3
assert myMap['a'] == 1

def emptyMap = [:]
assert emptyMap.size() == 0

def explicitMap = new TreeMap()
explicitMap.putAll(myMap)
assert explicitMap['a'] == 1

// *: spread operator
def composed = [x:'y', *:myMap]
assert composed == [x:'y', a:1, b:2, c:3]
}}}
* 2. using map operators
{{{
map 实现了 getAt 方法, 所以可以用下标操作法. 
map 还可以使用类似属性操作那样 map.key
第三种是使用 get 方法, get(index, default) 可以指定一个默认值;
如果 default 不指定, 默认为 null. 当 get(index) 找不到时就返回 null;
如果指定了 default , get(index, default) 在 map 中找不到对应的 index 时, 返回 default, 并将 index:default 加入 map.

def myMap = [a:1, b:2, c:3]
assert myMap['a'] == 1
assert myMap.a == 1
assert myMap.get('a') == 1
assert myMap.get('a',0) == 1
assert myMap['d'] == null
assert myMap.d == null
assert myMap.get('d') == null
ssert myMap.get('d',0) == 0
assert myMap.d == 0

myMap['d'] = 1
assert myMap.d == 1
myMap.d = 2
assert myMap.d == 2

map 赋值可以用下标操作符或点操作符. 如果 key 中有特殊操作符, 比如 'a.b':1 那么用点操作符时得加上 ''. 
keySet() 返回一个 key 的 set. 
value() 方法返回一个 value 的 set.
entrySet() 方法返回一个包含 entry 的 collection; 每个 entry 包含一个 key, value 对.

def myMap = [a:1, b:2, c:3]
def other = [b:2, c:3, a:1]
assert myMap == other

// jdk methods
assert !myMap.isEmpty()
assert myMap.size() == 3
assert myMap.containsKey('a')
assert myMap.containsValue(1)
assert myMap.entrySet() instanceof Collection

// gdk method
assert myMap.any {entry -> entry.value > 2 }
assert myMap.every {entry -> entry.key < 'd'}
assert myMap.values().toList() == [1, 2, 3]

// 迭代的例子
def myMap = [a:1, b:2, c:3]

def store = ''
myMap.each { entry ->
	store += entry.key
	store += entry.value
}
assert store == 'a1b2c3'

stor = ''
myMap.each { key, value -> 
	store += key
	store += value
}
assert store == 'a1b2c3'

store = ''
for (key in myMap.keySet()) {
	store += key
}
assert store == 'abc'

store = ''
for (value in myMap.values()) {
	store += value
}
assert store == '123'

gdk 给 map 带来新的能力包括:
- 给一个 key 集合参数, subMap 方法返回子 map
- findAll 返回所有满足 closure 的 entries 的集合(即子 map)
- find 方法返回一个满足 closure 的 entry
- collect 方法返回一个 list, list 元素由 closure return 回来. 也可以追加到一个 list 中去

def myMap = [a:1, b:2, c:3]
myMap.clear()
assert myMap.isEmpty()

myMap = [a:1, b:2, c:3]
myMap.remove('a')
assert myMap.size() == 2

assert [a:1] + [b:2] == [a:1, b:2]

myMap = [a:1, b:2, c:3]
def abMap = myMap.subMap(['a', 'b'])
assert abMap.size() == 2

abMap = myMap.findAll { entry -> entry.value < 3 }
assert abMap.size() == 2
assert abMap.a == 1

def found = myMap.find { entry -> entry.value < 2 }
assert found.key == 'a'
assert found.value == 1

def doubled = myMap.collect { entry -> entry.value *= 2 }
assert doubled instanceof List
assert doubled.every { item -> item % 2 == 0 }

def addTo = []
myMap.collect(addTo) { entry -> entry.value *= 2 }
assert addTo instanceof List
assert addTo.every { item -> item % 2 == 0 }
}}}
