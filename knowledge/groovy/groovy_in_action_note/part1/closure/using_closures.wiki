= using closures =
{{{
当把一个闭包作为参数传给 each 方法使用时, each 方法内部发生了什么? each 是怎么调用 closure　的呢?
接下来先看看调用闭包是多么简单, 然后再深入闭包提供的一些高级方法.
  }}}
* 1. calling a closure
{{{
假设有一个引用 x 指向了一个 closure, 那么就能够通过 x(), 或 x.call() 去调用闭包:

def adder = { x, y -> return x+y }
assert adder(4, 3) == 7
assert adder.call(2, 6) == 8

如果带有参数, 把参数放在()内这就不用多说了. x(param).

如何声明一个像 each 那样的可以方便使用闭包的方法:

// 1. Puts closures last
def benchmark(int repeat, Closure worker) {
	def start = System.nanoTime()

	// 2. call closure 并传值给它. 
	// 这里通过闭包的方式调用闭包, 为了理解方便, 可以想象一个 for 循环去调用 worker(i)
	repeat.times { worker(it) }

	def stop = System.nanoTime()
	return stop - start
}

// 使用我们声明的方法.
def slow = benchmark(10000) { (int) it / 2 }
def fast = benchmark(10000) { it.intdiv(2) }

assert fast * 2 < slow
  }}}
{{{
除非闭包定义了默认参数, call closure 时必须传递准确的参数数量.

def adder = { x, y=5 -> return x+y }
assert adder(4, 3) == 7
assert adder.call(7) == 12

闭包除了有被调用的能力外, 还有更多其他的能力
  }}}
* 2. more closure capabilities 
{{{
一般情况下只用到闭包的声明和调用就可以完成大部分工作了, 然而闭包不止能干这么点工作. 了解一下闭包能干些什么也是好的.
}}}
* 2.1 reacting on the parameter count or type
{{{
像 Map.each 方法展示的那样, 闭包能根据传递的参数数量或类型不同改变自己的行为.
我们声明自己的接收 closure 的方法时, 可以通过 Closure 的 getMaximumNumberOfParameters, getParameterTypes 方法达到这个目的.

// 这里省略了 return 关键字哦
def numParams (Closure closure){
	closure.getMaximumNumberOfParameters()
}
assert numParams { one -> } == 1
assert numParams { one, two -> } == 2

def paramTypes (Closure closure){
	closure.getParameterTypes()
}

// 可以看出 getParameterTypes 方法返回一个 type list
assert paramTypes { String s -> } == [String]
assert paramTypes { Number n, Date d -> } == [Number, Date]
}}}
* 2.2 how to curry favor with a closure
{{{
在 groovy 中, 闭包的 curry 方法返回一个克隆的闭包, 并绑定了一个或多个参数值. 参数值从左到右地绑定到 curry 的 arguments.

def mult = { x, y -> return x * y }
def twoTimes = mult.curry(2)
assert twoTimes(5) == 10

curry 方法实际上相当于: def twoTimes = { y -> mult 2, y } 显然这样写太麻烦了.

curry 方法真正的强大之处体现在当闭包的参数也是闭包的时候(the closure’s parameters are themselves closures)
}}}
*curry 方法将另一个闭包作为参数传入, 解决了闭包功能单一的问题.*
{{{
如果想通过闭包 a 解决一个复杂的任务, 该任务需要多种功能结合才能解决, 那就需要 a 去 curry 各个功能进来.

比如想设计一个闭包作为日志记录器, 那么这个闭包就需要去 curry 其他功能了. 
1) log 闭包得实现 println 功能 a <- 格式化 b <- 过滤 c; 这样就要定义 3 个闭包了.
2) 需要定义个闭包 d 去 curry  a, b, c 个闭包. d 的参数应该包含 a, b, c, 再加上实际要处理的日志消息就可以了.

下面的例子, 闭包 d 分为了两个, 原理跟 2) 中说的一样的:

// 下面两个是用来 curry 的闭包
def configurator = { format, filter, line ->
	filter(line) ? format(line) : null
}
def appender = { config, append, line ->
	def out = config(line)
	if (out) append(out)
}

// 单一功能的 a, b, c 闭包
def dateFormatter = { line -> "${new Date()}: $line" }
def debugFilter = { line -> line.contains('debug') }
def consoleAppender = { line -> println line }

// 开始 curry
def myConf = configurator.curry(dateFormatter, debugFilter)
def myLog = appender.curry(myConf, consoleAppender)

// 测试
myLog('here is some debug message')
myLog('this will not be printed')
}}}
* 2.3 closure composition
{{{
composition 就像数学中的复合函数 f(g(x)) 的概念是一样的.
groovy 中的 closure composition 通过 >> << 操作符实现:

def fourTimes = twoTimes >> twoTimes
def eightTimes = twoTimes << fourTimes
assert eightTimes(1) == twoTimes(fourTimes(1))
  }}}
* *classification via the isCase method*
{{{
Closure 实现了 isCase 方法, 使闭包能够用在in, grep, switch 方法. 要实现 isCase 功能, closure 得返回一个 boolean 值.

def odd = { it % 2 == 1}
assert [1,2,3].grep(odd) == [1, 3]
switch(10) {
	case odd : assert false
}
if (2 in odd) assert false

  }}}
