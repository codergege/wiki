= 7 The IoC Container =

* [[7_The_IoC_Container/7.12|7.12 java-based container configuration]]

* 7.1 Introduction to the Spring IoC container and beans
{{{
org.springframework.beans 和 org.springframework.context 这两个包是spring
IOC容器的基础包. BeanFactory 接口 提供了各种配置, 用于管理任何对象. 
ApplicationContext 是 BeanFactory的子接口.

简而言之, BeanFactory 提供了配置框架和基础功能, ApplicationContext 增加了更多的
企业应用用能. ApplicationContext 是 BeanFactory的超集, 是本章的 spring IOC 示例
中的指定容器. 
}}}
* 7.2 Container overview
{{{
接口 org.springframework.context.ApplicationContext 代表了srping IoC 容器, 负责实
例化, 配置和组装前面提到的 beans.

在单独的应用中，通常使用 ClassPathXmlApplicationContext 或者
FileSystemXmlApplicationContext.
}}}
* 7.2.1 Configuration metadata
{{{
三种配置元数据的方式, xml, annotation-based configuration, java-based
configuration.

一个 xml 配置的例子:

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="..." class="...">
    <!-- bean的详细配置 -->
    </bean>

    <bean id="..." class="...">
    <!-- bean的详细配置 -->
    </bean>

    <!-- 其他bean -->

</beans>


}}}
* 7.2.2 Instantiating a container
{{{
最常用的容器实例化方式是:

ApplicationContext context = 
        new ClassPathXmlApplicationContext(new String[] {"services.xml", "daos.xml"}); 

下面是 services.xml:

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- services -->

    <bean id="petStore" class="org.springframework.samples.jpetstore.services.PetStoreServiceImpl">
        <property name="accountDao" ref="accountDao"/>
        <property name="itemDao" ref="itemDao"/>
        <!-- additional collaborators and configuration for this bean go here -->
    </bean>

    <!-- more bean definitions for services go here -->

</beans>
--------------------------------------------
下面是 daos.xml:

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="accountDao"
        class="org.springframework.samples.jpetstore.dao.jpa.JpaAccountDao">
        <!-- additional collaborators and configuration for this bean go here -->
    </bean>

    <bean id="itemDao" class="org.springframework.samples.jpetstore.dao.jpa.JpaItemDao">
        <!-- additional collaborators and configuration for this bean go here -->
    </bean>

    <!-- more bean definitions for data access objects go here -->

</beans>
}}}
*Composing XML-based configuration metadata*
{{{
多个配置文件共同定义bean非常有用. 通常, 每个XML配置文件在你的架构中代表一个逻辑层
或者一个模块.

你可以使用 application context 构造方法加载多个 xml 配置文件(就像上面的例子), 也
可以加载一个配置文件, 然后在这个配置文件中 <import/> 其他的 xml 配置文件.

像这样:

<beans>
    <import resource="services.xml"/>
    <import resource="resources/messageSource.xml"/>
    <import resource="/resources/themeSource.xml"/>

    <bean id="bean1" class="..."/>
    <bean id="bean2" class="..."/>
</beans>

不推荐使用 / 开头, 它会被 spring 忽略, resource 的值都会被解析为相对路径或
classpath 中的相对路径.

推荐使用 file:C:/config/services.xml 或者 classpath:/config/services.xml 这种全
路径的方式.

}}}
* 7.2.3 Using the container
{{{
使用 ApplicationContext 的 T getBean(String name, Class<T> requiredType) 方法,
你可以得到想要的 bean 实例.

// create and configure beans
ApplicationContext context =
    new ClassPathXmlApplicationContext(new String[] {"services.xml", "daos.xml"});

// retrieve configured instance
PetStoreService service = context.getBean("petStore", PetStoreService.class);

// use configured instance
List<String> userList = service.getUsernameList();
}}}
* 7.3 Bean overview
* 7.4 Dependencies
* 7.4.1 Dependency Injection

*依赖注入有两种方式, 基于 构造方法的依赖注入 和 基于 setter 的依赖注入.*

*Constructor-based dependency injection*
{{{
下面是一个 POJO 类:

构造参数解决方案，会匹配所使用的参数类型。如果在bean的定义中，构造参数不存在歧义，那么，在bean定义中定义的构造参数的次序，在bean实例化时，就是提供给适合的构造参数的次序。看这个类：

package x.y;

public class Foo {

    public Foo(Bar bar, Baz baz) {
        // ...
    }

}

不存在歧义，假设Bar和Baz类没有集成关系，那么下面的配置是合法的，而且，不需要在<constructor-arg/>元素里指定构造参数的明确的indexes索引或者类型。

<beans>
    <bean id="foo" class="x.y.Foo">
        <constructor-arg ref="bar"/>
        <constructor-arg ref="baz"/>
    </bean>

    <bean id="bar" class="x.y.Bar"/>

    <bean id="baz" class="x.y.Baz"/>
</beans>

若需要引用另一个bean，类型已知，构造函数就可以匹配参数类型(像上面的示例)。使用简单类型时， 想<value>true</true>,Srping不能决定value类型情况，Spring就不能自己匹配类型。例如：

package examples;

public class ExampleBean {

    // Number of years to calculate the Ultimate Answer
    private int years;

    // The Answer to Life, the Universe, and Everything
    private String ultimateAnswer;

    public ExampleBean(int years, String ultimateAnswer) {
        this.years = years;
        this.ultimateAnswer = ultimateAnswer;
    }

}

上面的场景中，如果使用type属性明确指定构造参数的类型,容器就可以使用类型匹配。比如：

    <bean id="exampleBean" class="examples.ExampleBean">
        <constructor-arg type="int" value="7500000"/>
        <constructor-arg type="java.lang.String" value="42"/>
    </bean>

使用index属性明确指定构造参数的次序。比如

    <bean id="exampleBean" class="examples.ExampleBean">
        <constructor-arg index="0" value="7500000"/>
        <constructor-arg index="1" value="42"/>
    </bean>

当构造函数有2个相同类型的参数,指定次序可以解决此种情况。注意index是从0开始

    <bean id="exampleBean" class="examples.ExampleBean">
        <constructor-arg name="years" value="7500000"/>
        <constructor-arg name="ultimateAnswer" value="42"/>
    </bean>

记住，若要使Spring能从构造函数查找参数名字,代码在编译时必须开启调试模式。若你没有开启调试模式（或者不想），可以使用@ConstructorProperties JDK 注解明确指定构造参数的name。样例程序：

package examples;

public class ExampleBean {

    // Fields omitted

    @ConstructorProperties({"years", "ultimateAnswer"})
    public ExampleBean(int years, String ultimateAnswer) {
        this.years = years;
        this.ultimateAnswer = ultimateAnswer;
    }

}
}}}
*Setter-based dependency injection*
{{{
不用写了, 天天在用的. 就是用 setter 方法注入.
}}}

= -------------------------------------------- =
* 在非 web 应用中优雅的关闭 spring ioc 容器

If you are using Spring’s IoC container in a non-web application environment; for example, in a rich client desktop environment; you register a shutdown hook with the JVM. Doing so ensures a graceful shutdown and calls the relevant destroy methods on your singleton beans so that all resources are released. Of course, you must still configure and implement these destroy callbacks correctly.

To register a shutdown hook, you call the registerShutdownHook() method that is declared on the ConfigurableApplicationContext interface:

import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public final class Boot {

    public static void main(final String[] args) throws Exception {

        ConfigurableApplicationContext ctx = new ClassPathXmlApplicationContext(
                new String []{"beans.xml"});

        // add a shutdown hook for the above context...
        ctx.registerShutdownHook();

        // app runs here...

        // main method exits, hook is called prior to the app shutting down...

    }
}
= 使用 <context:property-placeholder /> =

With the context namespace introduced in Spring 2.5, it is possible to configure property placeholders with a dedicated configuration element. One or more locations can be provided as a comma-separated list in the location attribute.

<context:property-placeholder location="classpath:com/foo/jdbc.properties"/>

The PropertyPlaceholderConfigurer not only looks for properties in the Properties file you specify. By default it also checks against the Java System properties if it cannot find a property in the specified properties files. You can customize this behavior by setting the systemPropertiesMode property of the configurer with one of the following three supported integer values:

    -- never (0): Never check system properties
    -- fallback (1): Check system properties if not resolvable in the specified properties files. This is the default.
    -- override (2): Check system properties first, before trying the specified properties files. This allows system properties to override any other property source. 

== 使用 <context:property-override /> ==

PropertyOverrideConfigurer, 可以读取一个配置文件, 里面配置 bean 的属性值. 会覆盖 
原来的 bean 属性的默认值, 如果配置文件中没有配置某个属性, 那个属性使用默认值.

这个比较有用, 用这个重写 c3p0 的 spring 配置文件吧!

With the context namespace introduced in Spring 2.5, it is possible to configure property overriding with a dedicated configuration element:

<context:property-override location="classpath:override.properties"/>

Properties file configuration lines take this format:

beanName.property=value

For example:

dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.url=jdbc:mysql:mydb

This example file can be used with a container definition that contains a bean called dataSource, which has driver and url properties.

= 7.9 Annotation-based container configuration =

{{{
注解注射比 xml 注射先执行, 因此, xml 会覆盖注解.

用注解定义 bean, 即在 xml 配置文件中隐式的方式定义 bean, 需要在 xml 文件中定义一
个 tag. 看下面的例子(注意, xml 中包含了 context 命名空间)

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

</beans>

注意: <context:annotation-config/> 只会扫描定义它的 application context 中的
beans. 比如一个 web 程序中, WebApplicationContext 中为 DispatcherServlet 设置 
<context:annotation-config/>, 它只会找 controller 中 @Autowired bean, 而不会去
service 中去找.
  }}}
* 7.9.1 @Required
{{{
放在 setter 方法中(我觉得放在属性上没什么问题).
指明这个属性必须在 configuratin time 赋值. 防止空异常.
  }}}
* @Autowired
{{{
可以放在 setter, constructor, 普通 method 上, 一般放属性上比较常用.
可以对数组, 集合, 甚至 map 中.
如果你希望控制数组, list 中 bean 的顺序的话, bean 中用 @Order 或标准的 @Priority 

推荐使用 @Autowired 的 required 属性替代 @Required 注解.
  }}}

* 7.9.3 Fine-tuning annotation-based autowiring with @Primary
{{{
Let’s assume we have the following configuration that defines firstMovieCatalog as the primary MovieCatalog.

@Configuration
public class MovieConfiguration {

    @Bean
    @Primary
    public MovieCatalog firstMovieCatalog() { ... }

    @Bean
    public MovieCatalog secondMovieCatalog() { ... }

    // ...

}

With such configuration, the following MovieRecommender will be autowired with the firstMovieCatalog.

public class MovieRecommender {

    @Autowired
    private MovieCatalog movieCatalog;

    // ...

}

The corresponding bean definitions appear as follows.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

    <bean class="example.SimpleMovieCatalog" primary="true">
        <!-- inject any dependencies required by this bean -->
    </bean>

    <bean class="example.SimpleMovieCatalog">
        <!-- inject any dependencies required by this bean -->
    </bean>

    <bean id="movieRecommender" class="example.MovieRecommender"/>

</beans>
  }}}

* 7.9.4 Fine-tuning annotation-based autowiring with qualifiers
有时候同个类型有多个 bean, 那就用 @Qualifier 进行更细粒度的控制.
{{{
public class MovieRecommender {

    @Autowired
    @Qualifier("main")
    private MovieCatalog movieCatalog;

    // ...

}

@Qualifier注解也可以在构造参数或者方法参数上使用:

public class MovieRecommender {

    private MovieCatalog movieCatalog;

    private CustomerPreferenceDao customerPreferenceDao;

    @Autowired
    public void prepare(@Qualifier("main")MovieCatalog movieCatalog,
            CustomerPreferenceDao customerPreferenceDao) {
        this.movieCatalog = movieCatalog;
        this.customerPreferenceDao = customerPreferenceDao;
    }

    // ...

}

下面看看相应的bean定义，也就是上例中Qualifier("main")的bean是如何定义的，也就是如何制定bean的Qualifier：

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:annotation-config/>

    <bean class="example.SimpleMovieCatalog">
        <qualifier value="main"/>

        <!-- inject any dependencies required by this bean -->
    </bean>

    <bean class="example.SimpleMovieCatalog">
        <qualifier value="action"/>

        <!-- inject any dependencies required by this bean -->
    </bean>

    <bean id="movieRecommender" class="example.MovieRecommender"/>

</beans>
  }}}
*用 bean 的 id, name 也是可以的, 对应于 java-based bean 定义, 这种更常见*
*JSR-250 的 Resource 注解是基于 name 的, 不需要对集合或方法注入的话, 用这个更方便*

* 7.9.7 @Resource
* 7.9.8 @PostConstruct and @PreDestroy
{{{
CommonAnnotationBeanPostProcessor 不仅认识 @Resource, 还包括 JSR-250 lifecycle
的注解. 

public class CachingMovieLister {

    @PostConstruct
    public void populateMovieCache() {
        // populates the movie cache upon initialization...
    }

    @PreDestroy
    public void clearMovieCache() {
        // clears the movie cache upon destruction...
    }

}
  }}}
* 7.10 Classpath scanning and managed components
* 7.10.1 @Component and further stereotype annotations (更多的代码层注解)
{{{
@Repository 标记 repository 层的类(DAO 层).
@Component, @Service, and @Controller.

  }}}
* 7.10.3 Automatically detecting classes and registering bean definitions
{{{
spring 可以自动检测 stereotyped classes 并在 application 中注册对应的
BeanDefinitions.

比如下面两个类是可以自动检测的:

@Service
public class SimpleMovieLister {

    private MovieFinder movieFinder;

    @Autowired
    public SimpleMovieLister(MovieFinder movieFinder) {
        this.movieFinder = movieFinder;
    }

}

@Repository
public class JpaMovieFinder implements MovieFinder {
    // implementation elided for clarity
}

为了自动检测上面的两个 class, 你需要增加一个 @ComponentScan 到 @Configuration
class 中. 用 basePackage 属性指定这两个 class 的共同父包.

@Configuration
@ComponentScan(basePackages = "org.example")
public class AppConfig  {
    ...
}

为了更简洁, 可以使用 value 属性, @ComponentScan("org.example").

或者在 xml 中进行配置:

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <context:component-scan base-package="org.example"/>

</beans>

注意: <context:component-scan> 隐式的 enables <context:annotation-config>
的功能. 此外, 当使用 component-scan 元素时, AutowiredAnnotationBeanPostProcessor 
和 CommonAnnotationBeanPostProcessor 都会隐式启用. 意味着这两个组件也是自动探测和
注入的, 有这些都不需要XML配置

注意:
扫描类包需要相应的目录在classpath内存在。使用Ant构建JAR包时，确保打包任务不要开启仅打包文件(无需相应的目录)选项。当然了，在某些环境装因为安全策略，classpath目录也许不能访问。比如，基于JDK1.7.0_45或更高版本的JDK的单独的应用(需要在manifests包清单中设置信任类库Trusted-Library；详情参看http://stackoverflow.com/questions/19394570/java-jre-7u45-breaks-classloader-getresources)


在 gradle 文件中, 我已经加入了 'Trusted-Library': true.


  }}}
* 7.10.4 Using filters to customize scanning
{{{
可以过滤哪些扫描, 哪些不扫描. 可以使用 @Component 注解的 includeFilters 和
excludeFilters 参数(xml 的话就是 include-filter, exclude-filter 子元素).

| Filter Type          | Example Expression         | Description                                                          |
| annotation (default) | org.example.SomeAnnotation | 一个注解, 声明在目标组件类级别上的                                   |
| assignable           | org.example.SomeClass      | 一个类(或接口), 目标组件的类                                         |
| aspectj              | org.example..*Service+     | 一个 AspectJ 类型表达式, 匹配目标组件                                |
| regex                | org\.example\.Default.*    | 一个正则表达式, 匹配目标组件的类名                                   |
| custom               | org.example.MyTypeFilter   | 一个自定义的实现, 实现 org.springframework.core.type.TypeFilter 接口 |

The following example shows the configuration ignoring all @Repository annotations and using "stub" repositories instead.

@Configuration
@ComponentScan(basePackages = "org.example",
        includeFilters = @Filter(type = FilterType.REGEX, pattern = ".*Stub.*Repository"),
        excludeFilters = @Filter(Repository.class))
public class AppConfig {
    ...
}

and the equivalent using XML

<beans>
    <context:component-scan base-package="org.example">
        <context:include-filter type="regex"
                expression=".*Stub.*Repository"/>
        <context:exclude-filter type="annotation"
                expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>
</beans>
	


  }}}
* 7.10.6 Naming autodetected components
{{{
默认的, 任意 spring sterotype 注解(@Component, @Repository, @Service, and
@Controller) 的 value 属性对应的 bean 定义中的 name.

 For example, if the following two components were detected, the names would be myMovieLister and movieFinderImpl:

@Service("myMovieLister")
public class SimpleMovieLister {
    // ...
}

@Repository
public class MovieFinderImpl implements MovieFinder {
    // ...
}


  }}}
* 7.10.7 Providing a scope for autodetected components
{{{
spring 管理的组件, 为自动检测组件默认的并最常用的 scope 是 singleton.有时候你想
使用不同的 scope, 可以使用 @Scope 注解.

@Scope("prototype")
@Repository
public class MovieFinderImpl implements MovieFinder {
    // ...
}


  }}}
* 7.11 Using JSR 330 Standard Annotations

