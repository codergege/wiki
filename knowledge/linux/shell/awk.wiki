{{{
相对于 sed 常常作用于一整个行的处理, awk 则比较倾向于一行当中分成数个字段来处理. 因此, awk 相当适合处理小型数据的处理
awk '条件类型1{动作1} 条件类型2{动作2} ...' filename
awk 主要处理每一行的字段内的数据, 默认的字段的分隔符为 "空格" 或 "tab"
eg:
last -n 5 | awk '{print $1 "\t" $3}'
	- 因为要处理所有行, 所以不加条件类型
	- 动作必须由 '' 来包含
	- 通过 print 来打印输出
	- $1 行中的第一个字段, $0 代表整行

awk 处理流程:
1. 读入第一行, 并生成 $0, $1, $2... 等变量
2. 依据 "条件类型" 的限制, 判断是否需要进行后面的 "动作"
3. 做完所有的动作与条件
4. 若还有后续的行, 重复 1~3 

awk 内建的变量:
NF: 每一行($0)拥有的字段数
NR: 目前 awk 所处理的是 "第几行" 数据
FS: 目前的分隔符, 默认是空格

BEGIN 关键字
可以在读取第一行之前执行后面的动作, 例如 预设变量, 设置 FS
cat passwd | awk 'BEGIN {FS=":"} $3<10 {print $1 "\t" $3}'

printf 输出时, 要换行必须加入 \n

{} 内的多个指令, 用 ; 隔开

除了 $0, $1... 这些, awk 内使用变量不需要 $
}}}
